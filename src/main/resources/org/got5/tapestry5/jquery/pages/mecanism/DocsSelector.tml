<html t:type="layoutWithAccordion" 
	  t:activeElement="literal:3"
	  t:title="Selector Binding"
	  xmlns:t="http://tapestry.apache.org/schema/tapestry_5_3.xsd" 
	  xmlns:p="tapestry:parameter">
    
    <t:jquery.tabs  t:tabs="docs,example" t:activePanelId="0">
    
    <p:docs>
    	<t:componentDocumentation>
			<p:title>
				Selector Binding
			</p:title>
			<p:description>
				Automatically injected into components that support getClientId(). This combines with
				the selector binding to create jQuery selectors. The selector binding supports 'this'
				which returns the selector for the enclosing component that supports getClientId().
				For the most part the selector binding will return the correct value. Specifically
				you can't always get the correct selector for a named component in a loop. More
				specifically if a component with the same name is rendered more than once on
				a page the selector changes as that component is rendered. In this case the
				selector binding will return a selector for the currently rendering component.
				This may or may not be the one you want.  
			</p:description>
			
			
		</t:componentDocumentation>
	</p:docs>
    
    <p:example>
    <div>
    	<p>
    		This demonstration page will show you How to use the selector Binding. This selector will
    		use the Selector mixin, injected automatically to the ClientElement component. This
    		mixin will create an array like : selector['the Tapestry Id']='#The jQuery Id';<br /> 
    		<ul>
    			<li>- Using "this" will return the clientId of the current Element.</li>
    			<li>- If you want to get the clientId of specific component, you will use the t:id parameter of the component</li>
    			<li>- We have also an example of using the selector binding in JavaScript Callback function.</li>
    		</ul> 
    		Please have a look to the template file in order to understand the demo.
    	</p>
<t:any class="${selector:this}" t:mixins="slider,slidechange" 
	slidechange.event="slidechange"
	slidechange.callback="function (event,ui,url) 
	 {alert('The id of the current element is : ' + ${selector:this}.attr('id'));}"
	options='{min:0, max:100, value: 10, step: 2 }'
>
<br /><br />Using "this" inside a component will return the clientId of the 
component container : <br />
>> ${selector:this}<br /><br />

<t:any t:id="first" >
</t:any><br /><br />

If you do not specify the t:id to your components, the selector will nethertheless 
use the unique t:id generated by Tapestry :<br />
<t:any >>> ${selector:this}</t:any>
<t:any >>> ${selector:this}</t:any><br /><br />
	    
If you want to get the clientId of a specific component, you can use its t:id 
parameter :<br />
<t:any t:id="test">>> ${selector:this} ${selector:first}</t:any><br /><br />
	    
Event if we used many times "this" before, in this case, we will get the clientId 
of the Component container :<br />
>> ${selector:this}</t:any>  
	</div>
<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>
    	<div t:type="jquery/showSource" t:ext="html" t:beginLine="43" t:endLine="66" t:path="resources/org/got5/tapestry5/jquery/pages/mecanism/DocsSelector.tml"></div>
    	
     </p:example>
    </t:jquery.tabs>
</html>
<html t:type="layoutWithAccordion"
	  t:activeElement="literal:2"
	  t:title="Widget"
	  xmlns:t="http://tapestry.apache.org/schema/tapestry_5_3.xsd" 
	  xmlns:p="tapestry:parameter">
    
    <t:jquery.tabs  t:tabs="docs,example" t:activePanelId="0" t:ajax="false">
    
    <p:docs>
    	<t:componentDocumentation>
			<p:title>
				Widget Mixin
			</p:title>
			<p:description>
				Interface for jQuery UI widgets. Generally subclassed to create a specific type of widget. See slider.
			</p:description>
			
			<p:link_1><t:componentLink t:url="http://docs.jquery.com/UI_Developer_Guide"/></p:link_1>
			<p:param_1>
				<t:componentParameter
					t:name="options"
					t:required="false"
					t:javaType="JSONObject"
					t:prefix="literal"
					t:defaultValue="none"
					t:description="Arguments used to contruct the widget. Defaults may be supplied thru the WidgetParms service."
				/>
			</p:param_1>
			<p:param_2>
				<t:componentParameter
					t:name="script"
					t:required="false"
					t:javaType="String"
					t:prefix="literal"
					t:defaultValue="none"
					t:description="Experimental! Allows passing javascript functions (or anything) to widgets. This option
					will contruct a javascript url for the request and use a script tag to fetch it. The gets around JSONObject
					datatype limitations but adds complications in load balanced/high volume environments."
				/>
			</p:param_2>
			<p:param_3>
				<t:componentParameter
					t:name="name"
					t:required="false"
					t:javaType="String"
					t:prefix="literal"
					t:defaultValue="this.getClass().getSimpleName().toLowerCase()"
					t:description="Name of the jQuery widget. Typically supplied by subclassing widget to a jQuery widget name."
				/>
			</p:param_3>
		</t:componentDocumentation>
	</p:docs>
    
    <p:example>
    	<div>
    		<h2>Create a new mixin with just the Widget Class</h2>
    		<p>
    			You can use a jQuery Widget, which is not available as a mixin in your project, by using
    			the <strong>Widget</strong> class and its <b>name</b> parameter. Tapestry-jQuery
    			will use this value for the name of the widget to execute.<br /> 
    			In this example, we want to use the Slider widget (completely different from the Tapestry-jQuery Slider component).
    			The name parameter will be "slider" and Tapestry-jQuery will automatically call the jQuery widget : $(selector).slider(options). 
    		</p>
<div t:type="any"  t:mixins="jquery/ui/widget" widgetName="slider" 
				options="{min:0, max: 100}"></div>
    		<div t:type="jquery/showSource" t:ext="html" t:beginLine="64" t:endLine="65" t:path="resources/org/got5/tapestry5/jquery/pages/mixins/DocsWidget.tml"></div>
    	</div>
   		<div>
   			<h2>Create a new mixin with a Sub-Class of Widget</h2>
   			<p>
   				You can also create a class, extending the Widget Class, in order to make some initialization for example. You
   				will put this new class in the mixins sub-package. In this case, you do not have to specify the name parameter. 
   				By default, Tapestry-jQuery will take the name of the class.
   			</p>
<div t:type="any"  t:mixins="slider" slider.options="{min:0, max: 100}"></div>
   			<div t:type="jquery/showSource" t:ext="html" t:beginLine="75" t:endLine="75" t:path="resources/org/got5/tapestry5/jquery/pages/mixins/DocsWidget.tml"></div>
   			<div t:type="jquery/showSource" t:ext="java" t:beginLine="6" t:endLine="9" t:path="java/org/got5/tapestry5/jquery/mixins/Slider.java"></div>
   		</div>	
   		<br />
	    <br />
    	
   </p:example>
</t:jquery.tabs>
</html>